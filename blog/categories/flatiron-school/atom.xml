<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron&nbsp;school | The Searching Mind]]></title>
  <link href="http://nigelfloe.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://nigelfloe.github.io/"/>
  <updated>2015-09-20T23:31:46-04:00</updated>
  <id>http://nigelfloe.github.io/</id>
  <author>
    <name><![CDATA[David Rowe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[More than one way to shear an Electric Sheep]]></title>
    <link href="http://nigelfloe.github.io/blog/2015/09/20/electric-sheep/"/>
    <updated>2015-09-20T17:27:20-04:00</updated>
    <id>http://nigelfloe.github.io/blog/2015/09/20/electric-sheep</id>
    <content type="html"><![CDATA[<h2>Android Dreams v1</h2>

<p>One of my favorite apps is <a href="http://electricsheep.org/">Electric Sheep</a>, an open source &ldquo;collaborative abstract artwork&rdquo; masquerading as a flashy screensaver. While your computer is sleeping, it uses creator Scott Draves <a href="http://scottdraves.com/flame.html">flame algorithm</a> to render animations affectionately referred to as <a href="http://imgur.com/gallery/RcsjPpd">&ldquo;sheep&rdquo;</a>.</p>

<p>Sheep are initially created and uploaded to the program&rsquo;s &ldquo;gene pool&rdquo; by community members. All sleeping computers running Electric Sheep act as a distributed network, sharing the sheep and mutating them algorithmically. As time goes on the current <a href="http://v2d7c.sheepserver.net/cgi/best.cgi">&ldquo;flock&rdquo;</a> will slowly change form and &ldquo;evolve&rdquo;. This process is directed by users of the program, who can up or down vote the sheep as they run, providing a proxy for natural selection, as the less popular sheep make their way out of the gene pool, and any given sheep&rsquo;s designer or <a href="http://v2d7c.sheepserver.net/cgi/node.cgi?id=5352&amp;detail=lineage">&ldquo;family tree&rdquo;</a> can be viewed on the program&rsquo;s website.</p>

<p><img src="http://v2d7c.sheepserver.net/gen/245/3422/electricsheep.245.03422.jpg" alt="electricsheep.org" /></p>

<hr />

<h3>Sidebar:</h3>

<p>Draves&rsquo;s Flame algorithm was created in 1991 and is often sited as the first use of the GPL open source license for art and graphics applications, and Flame algorithms have shown up <a href="https://www.youtube.com/watch?v=GdIjCSi1XOk">all over the place</a>.</p>

<hr />

<h2>Enter Google</h2>

<p>Electric Sheep&rsquo;s visualizations bear a more than passing similarity to a <a href="http://www.twitch.tv/317070">Twitch livestream</a> of the &ldquo;hallucinations&rdquo; of an AI programmed by a group of PhD students at Belgium&rsquo;s Ghent University. Their AI is built on <a href="http://googleresearch.blogspot.co.uk/2015/06/inceptionism-going-deeper-into-neural.html">research recently published by Google</a> into deep neural networks which were originally built to identify and classify images based on their content. Google&rsquo;s researchers found that these networks, once primed with the keyword of an object they could recognize, were also primed with the information necessary to <em>generate</em> images, with some pretty surreal results:</p>

<p><img src="https://lh3.googleusercontent.com/SrqGJTXPiuw0f3VrLtpciJd2vIG34nSKkzyRGEWh5g8XDQ3TSxlCtyCbASXHYQR4IqzTBD4-4ChRFJ-ODU7vu-MTMzU9M5kT7RobDP6WP0PFCtTBY5SXyEcmYzSiBxSkO28oheMrQWLdIJ95qxFrNJRqwaXouKDqE0iVLdMg4rlzpsAjD9zIaaUQ_gVNU20mxqrtcTjvXKEoZdd_SmbqmY-_Pp3KP_mWgnyL0CQdlv8UqN-5Lpoh1Gchz9RUns-nVaM1Zbiyq_XyY6ylTu8AAE0flUl8K5CR5wAdNSfak8P1P0dcAROGubEFOVRJqjNKKQRuM71v1gCakFtsEflg1sPv2GuZM4oDAP-OTtTY4B7S6kjGpSowsv3GhXB_ZRbKbw-xGoSRbd7_-0gACc4tTcUH0JeuQF0OdQAlKMuVe5Nwu0OwKVsfT90dt3F7JtxKdd0YYiR1i3MV6e-pqRqJNnqOZfGQfAO-rj6Gp-h0Osvye32r1tq38_VIJs9hfYoAAw9VhLBaSIzGw05d3wS7kQJBlcNxYBiCictI39TPnBw=w716-h448-no" alt="http://bit.ly/1Fo28lX" /></p>

<p><img src="https://lh3.googleusercontent.com/wXxsgrvrYmxa7ad4ro7dekU2yZw4CKtRnWwA7E_5hZqLD5_L2b7PIlp6j7MKbstGjDHgtpkKiIXgfwLQetDI16ciF7IKWmIzTipY5c5m3aGtySQsAg5-rks904BzkMgeCUtW7-x5SWXcrK13YwCU9reJWALOa7bC4xUFj2ovtJDYGTOwrcNE3dwbMTZzWMcbeOmjojb2-epO4hhemZn5Hql8nrwx8TeAcwjZkaGdqUZX3Cg4vxw1-KSkn8HGv_HWEG1VWtX_CfVrYkDbX0PpKhBkVgFtWIYM5JJiVNvpN-aRNoZzKIKxeY0D45TmO2kTc1jAZdOhUnmb7SWxd3zbryI5aWV_BjNqk2JXIiOAtWn1XDJwKLwUZ3cvPqLYzjOCe_xIw1G6vJbyA2X-n7jVDVhWKqLlHJ7Q5dRhwX305T1WetEr8p7odpCmKq3o3RE7hJu9_3tr6XHvms5gNi2PEvkTFu__s7AZwr01xT8RxNOkpd05RiLiYmPLUaUVrLKc_jlPmxY0GUKfqAFWm8vbb0KAymIKjKHKIxA5b6o6kEY=w1200-h800-no" alt="http://bit.ly/1Fo28lX" /></p>

<p><img src="https://lh3.googleusercontent.com/k4Re_tnPfAHlfpu9XgyXFLhgLEpi4IrfPpk2J9y3AaMbUeaEwzXHeJtUoOOUA0quIexkOs65lQ_5VhyDRSbzvJKyNLOfSnzNT2Rl2p2nqH_1Tf2GaxirNTaCwb58Z5rNep3mN2wIJ0Dz3VDJ1uiER68d2xSBfxrP6h1ZjjDCt_pdRqBwHkAiRnjf13cz43bwR8JYUAfvwcGqqKjLGT-X6ItYgDqJbYA09GtI21ZYFd8_hcI-HMy4Xcp-OszMOEnjD19ukMhyXaK55b0GR32hsPUAc2i_j4vthAfo0MUoMRkzrB9JCDYuLn4Gv_68dlAQn595IFp0wOclq8CmMUFE8Uh9sJwC5YqMvNn_1VSId5gcL-mKEgJ-THNMOItqEvxhPRma4Ym3putVfGJn9G_YvGUJ46kiHFOQ7RyWraVfJ6QeLfCwHb5OUX9mTqPJT8rpkMv3uULydDX5yRmN1H5WYDEicqMmRIgv2yvHZHx3sQCFAY3TXMWgSmHqJDxsZ0cKA7TjdI2MFtgRZVhZM80o6rReKKdx3TovAGd-KOHQi-o=w1180-h862-no" alt="http://bit.ly/1Fo28lX" /></p>

<p>The Guardian printed solid articles both <a href="http://www.theguardian.com/technology/2015/jun/18/google-image-recognition-neural-network-androids-dream-electric-sheep">Google&rsquo;s initial research</a> and <a href="http://www.theguardian.com/technology/2015/jun/25/watch-android-dream-electric-sheep-live">the Belgian livestream</a>, so check out those articles if you are interested, as well. The above images are sourced from the <a href="https://photos.google.com/share/AF1QipPX0SCl7OzWilt9LnuQliattX4OUCj_8EP65_cTVnBmS1jnYgsGQAieQUc1VQWdgQ?key=aVBxWjhwSzg2RjJWLWRuVFBBZEN1d205bUdEMnhB">photo blog</a> of Michael Tyka, and there are many more images there.</p>

<h2>A Super Basic Intro to Neural Networks</h2>

<p>Apart from creating self-evolving animations, classifying images, or generating android dreams, neural networks have many applications, from use in hearing aids and cochlear implants, to self-driving cars, to facial recognition software and robotics.</p>

<p>But <a href="https://vimeo.com/62218296">what is a neural network?</a></p>

<p><img src="http://images3.wikia.nocookie.net/__cb20080524190504/uncyclopedia/images/7/79/What_are_birds.jpg" alt="" /></p>

<p>Let&rsquo;s start with a definition:</p>

<h3>&ldquo;[An artificial neural network is] a computing system made up of a number of simple, highly interconnected processing elements, which process information by their dynamic state response to external inputs.&rdquo;</h3>

<h4>- In &ldquo;Neural Network Primer: Part I&rdquo; by Maureen Caudill, AI Expert, Feb. 1989</h4>

<p>&hellip;.ok, maybe that helped a little.</p>

<p>Artificial neural networks, which we are discussing here, are modeled after the networks of neurons found in animal brains and nervous systems.</p>

<p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTvPd9clSfYmmekdGvkfkjzleYP0tllyW7aH-JfoBC4hhmMVuEp" alt="source: https://blogs.cornell.edu/info2040/2015/09/08/neural-networks-and-machine-learning/" />
In this model, each processing element can be thought of as a neuron in the brain, which at a basic level:</p>

<ol>
<li>receives some positive number of inputs from an external source</li>
<li>processes these inputs based on remembered or programmed behavior</li>
<li>sends an output to another neuron or neurons in the network</li>
</ol>


<p><img src="http://natureofcode.com/book/imgs/chapter10/ch10_03.png" alt="source: http://natureofcode.com/book/chapter-10-neural-networks/" /></p>

<p>In the above diagram, we can see a model of the simplest neural network possible, a perceptron. This perceptron receives 2 inputs, processes them, and sends an output out along the line.</p>

<p>The following example is taken from <a href="http://natureofcode.com/book/chapter-10-neural-networks/">Chapter 10 of Daniel Shiffman&rsquo;s <em>The Nature of Code</em></a>:</p>

<hr />

<p><strong>Step 1: Receive inputs.</strong></p>

<p>Say we have a perceptron with two inputs—let’s call them x1 and x2.</p>

<p><em>Input 0: x1 = 12</em>
<em>Input 1: x2 = 4</em></p>

<p><strong>Step 2: Weight inputs.</strong></p>

<p>Each input that is sent into the neuron must first be weighted, i.e. multiplied by some value (often a number between -1 and 1). When creating a perceptron, we’ll typically begin by assigning random weights. Here, let’s give the inputs the following weights:</p>

<p><em>Weight 0: 0.5</em>
<em>Weight 1: -1</em></p>

<p>We take each input and multiply it by its weight.</p>

<p><em>Input 0 * Weight 0 ⇒ 12 * 0.5 = 6</em></p>

<p><em>Input 1 * Weight 1 ⇒ 4 * -1 = -4</em></p>

<p><strong>Step 3: Sum inputs.</strong></p>

<p>The weighted inputs are then summed.</p>

<p><em>Sum = 6 + -4 = 2</em></p>

<p><strong>Step 4: Generate output.</strong></p>

<p>The output of a perceptron is generated by passing that sum through an activation function. In the case of a simple binary output, the activation function is what tells the perceptron whether to “fire” or not. You can envision an LED connected to the output signal: if it fires, the light goes on; if not, it stays off.</p>

<p>Activation functions can get a little bit hairy. If you start reading one of those artificial intelligence textbooks looking for more info about activation functions, you may soon find yourself reaching for a calculus textbook. However, with our friend the simple perceptron, we’re going to do something really easy. Let’s make the activation function the sign of the sum. In other words, if the sum is a positive number, the output is 1; if it is negative, the output is -1.</p>

<p><em>Output = sign(sum) ⇒ sign(2) ⇒ +1</em></p>

<p>Let’s review and condense these steps so we can implement them with a code snippet.</p>

<p><strong>The Perceptron Algorithm:</strong></p>

<ul>
<li><p>For every input, multiply that input by its weight.</p></li>
<li><p>Sum all of the weighted inputs.</p></li>
<li><p>Compute the output of the perceptron based on that sum passed through an activation function (the sign of the sum).</p></li>
</ul>


<hr />

<p>This is the basic process of each unit in a neural network. Once the network has provided its final output, the outcome will be used to adjust the weights of the network&rsquo;s inputs. Of course, in a real world application, a neural network would consist of many, many nodes like our perceptron, each of them dynamically responding and reweighing its inputs based on output from its neighbors, and the problem being solved would be much more complicated than determining if a sum is positive or negative.</p>

<p>The image below shows a simple multi-node neural network. This example is 3-layer network, and you can see that the potential behavior is already much more complicated:</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/Artificial_neural_network.svg/560px-Artificial_neural_network.svg.png" alt="source: Wikipedia" /></p>

<p>The central layer is labeled &ldquo;hidden&rdquo; because the user of such a network does not have direct access to the network&rsquo;s behavior in the middle layer; we can only directly observe what external inputs precipitated a given output. For this reason, the inner-workings of complex neural networks, such as those behind Google&rsquo;s image classifier or self-driving cars remain somewhat mysterious, as it is possible to have a working network without understanding precisely why the program works.</p>

<p>Among other secrets, these hidden neural layers house the stuff of robotic dreams.</p>

<p><img src="https://media.giphy.com/media/mAeS8x4HQdhMA/giphy.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountains are merely mountains]]></title>
    <link href="http://nigelfloe.github.io/blog/2015/09/08/mountains-are-merely-mountains/"/>
    <updated>2015-09-08T00:11:10-04:00</updated>
    <id>http://nigelfloe.github.io/blog/2015/09/08/mountains-are-merely-mountains</id>
    <content type="html"><![CDATA[<h3>The brook of the mountains</h3>

<h3>Gives me more pleasure than the sea</h3>

<h4>- José Martí</h4>

<p>I spent the weekend at the beach with family. It was a nice opportunity to clear my mind of the burden of my day to day, <a href="http://www.theonion.com/article/84-million-new-yorkers-suddenly-realize-new-york-c-18003">get out of NYC</a>, and allow my mind to come back to the present.</p>

<p>Also, I got a really bad sunburn :-/</p>

<p><img src="http://www.fusiontrained.com/wp-content/uploads/2014/09/Will-Ferrell-sunburn.jpg" alt="http://www.fusiontrained.com/wp-content/uploads/2014/09/Will-Ferrell-sunburn.jpg" /></p>

<p>I&rsquo;ve been thinking a lot about the choices one has to make in order to become an effective programmer. Whether you are learning a new language, being exposed to new concepts and techniques, or applying what you already know to solve the day&rsquo;s challenges, it is easy to become overwhelmed and discouraged by what you don&rsquo;t know or understand. The following quote by artist/photographer/programmer Adam Magyar sums the problem of human limitation:</p>

<h3>I was thinking about how little choice we have when we select our path. We are able to see just a narrow angle, whatever we do. Our knowledge is really limited, and small.”</h3>

<h4>-Adam Magyar</h4>

<p>We only have so much control over the world around us at any given time. We can only see the world from our own eyes. The path we walk is shrouded in uncertainty. Our actions seem insignificant given the grand scale of the universe.</p>

<p><img src="https://paulandsilas.files.wordpress.com/2010/10/insignificant.jpeg" alt="https://paulandsilas.files.wordpress.com/2010/10/insignificant.jpeg" /></p>

<p>Remember that your choices have dignity and importance precisely because you make them in the face of entropy. We choose to build and create and love everyday, and our universe is undoubtedly a richer place because of it.</p>

<p>Accept your limitations. At this moment, there is much you do not know how to do. In every moment you choose to treat the boundary of your knowledge as an end or a beginning. Growth happens as we push that boundary outwards, beyond our current selves.</p>

<p>Every problem will yield to diligent effort, and the abstraction, or method, or pattern you struggle to understand today will be your go-to solution tomorrow.</p>

<p>Growth takes time, and your path will have its detours. Be humble. Be patient. Listen to your feelings. Trust your intuition.</p>

<h2>Zen and the Art of Computer Programming</h2>

<p>The principles of Zen can be applied to virtually any craft, and programming is no different. The title of this section is taken from <a href="http://www.librarysystems.com/zen.htm">this essay</a> by Larry W. Yother, back in 1986. It&rsquo;s a quick read, and is full of helpful advice. Here is a key paragraph:</p>

<blockquote><p>The system will invariably impose all manner of restrictions: the memory space isn’t big enough, the language is limited, input-output devices won’t do what you would like them to. These become challenges, albeit frustrating ones.</p>

<p>Most of the restrictions, however, are in your own mind. It is very difficult to resist the trap of continuing to look for a solution in the wrong place. If an approach to a particular problem yields no results, the usual response is to work even harder on that same approach. This unfortunate fact seems to be true in all human endeavors, from child-raising to international relations. You, as programmer, must know about when something should be expected to pay off, and, if the time passes and there is no payoff, you must stop doing whatever you’re doing and try something else. You must look around at this point, try to see what you’re really doing, and do something else.</p></blockquote>

<p>See also these <strong><a href="http://www.grobmeier.de/the-10-rules-of-a-zen-programmer-03022012.html">10 Rules of a Zen Programmer</a></strong> by Christian Grobmeier. (I&rsquo;m thinking of ordering the book). The bullet points listed below are elaborated in much more detail at the above link:</p>

<p><img src="http://www.grobmeier.de/img/content/200px-Lotus-buddha.svg_.png" alt="http://www.grobmeier.de/img/content/200px-Lotus-buddha.svg_.png" /></p>

<ol>
<li>Focus</li>
<li>Keep your mind clean</li>
<li>Beginners mind</li>
<li>No ego</li>
<li>There is no career goal</li>
<li>Shut up</li>
<li>Mindfulness. Care. Awareness</li>
<li>There is no Boss</li>
<li>Do something else</li>
<li>There is nothing special</li>
</ol>


<p>Last but not least, there are the <strong><a href="http://rubykoans.com/">Neo Ruby Koans</a></strong>. This project is essentially a public directory of ruby files which anybody can download. Each file contains many Ruby quizzes and coding puzzles designed to train the user through developing their Ruby skills, from working with hashes, strings, and symbols, to metaprogramming and Ruby interoptivity with Java.</p>

<p>The Koans are structured as a test-driven development (TDD) project, and running the path_to_enlightenment.rb file provides a customized test output to the terminal (similar to Rspec) which points the developer-in-training towards the next piece of code which requires attention. The title of this post, &ldquo;Mountains are only mountains&rdquo; is a mantra borrowed from the Ruby Koans.</p>

<h3>Every day is a good day</h3>

<h4>Special thanks to: RB, CM, KR, SL, ETO</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Dream of Ruby]]></title>
    <link href="http://nigelfloe.github.io/blog/2015/08/23/i-dream-of-ruby/"/>
    <updated>2015-08-23T18:49:49-04:00</updated>
    <id>http://nigelfloe.github.io/blog/2015/08/23/i-dream-of-ruby</id>
    <content type="html"><![CDATA[<h2>HydrationError expecting water (0 for 1)</h2>

<p>Last night, I lay tossing and turning in bed, wrestling with phantom error messages. For some reason, the <code>sound_sleep</code> method I normally relied on to send my <code>self</code> (<code>david = Person.new(name: David, age: 26)</code>) off to <code>asleep = true</code> wasn&rsquo;t doing the trick.</p>

<pre><code class="ruby">class Person
  include Sleepable
  attr_accessor :name, :age, :asleep
  def initialize(name:, age:)
    @name = name
    @age = age
    @asleep = false
  end

  def asleep?
    !!@asleep
  end
end

david = Person.new(name: 'David', age: 26)
david.asleep?                               # =&gt; false
</code></pre>

<p>What&rsquo;s going on here? I roll over, and ask Taryn, my girlfriend, why I can&rsquo;t sleep. She furrows her brows and turns away from me, taking the blankets.</p>

<p>Hmph. I guess I&rsquo;ll check the Sleepable module for answers:</p>

<pre><code class="ruby">module Sleepable
  def sound_sleep
    if hydrated
      asleep = true
    end
  end
end

david.sound_sleep                           # =&gt; nil
</code></pre>

<p><code>nil</code> sleep sucks at 2 AM.</p>

<p>Check the conditional, maybe <code>self</code> is de<code>hydrated</code>?</p>

<pre><code class="ruby">david.hydrated                              # =&gt; nil
</code></pre>

<p><code>nil</code> isn&rsquo;t really helping me here&hellip;. Let&rsquo;s look at my Person class again&hellip;</p>

<pre><code class="ruby">class Person &lt; Biology
  include Sleepable
  attr_accessor :name, :age, :asleep  
  def initialize(name:, age:)
    @name = name
    @age = age
    @asleep = false
  end

  def asleep?
    !!@asleep
  end
end

david.asleep?                               # =&gt; false
</code></pre>

<p><em>grumble</em></p>

<p>I don&rsquo;t see anything about <code>hydrate</code> here. This is hopeless, and <code>david</code> is so tired&hellip;I mean.. <em>I&rsquo;m</em> so tired. <code>self</code> is tired&hellip;..</p>

<p>Hang on! What&rsquo;s that <code>Biology</code> inheritance? That wasn&rsquo;t there before! Fucking dream code:
<code>ruby
david.class.ancestors                       # =&gt; [Person, Sleepable, Biology, Object, Kernel, BasicObject]
</code></p>

<p>a-HA! a <code>Biology</code> class, that must be the class that&hellip;ummm&hellip;generates behavior for&hellip;..biologic things&hellip;.like birds! or <a href="http://giphy.com/gifs/cat-lolcats-the-internet-EeffMbJ6pwxAQ">lolcats</a>! or people maybe</p>

<pre><code class="ruby">Biology.methods                             # =&gt; [:allocate, :new, :superclass, :json_creatable?, :freeze, :===, :==, :&lt;=&gt;, :&lt;, :&lt;=, :&gt;, :&gt;=, :to_s, :inspect, :included_modules, :sh_t, :include?, :name, :ancestors, :instance_methods, :public_instance_methods, :protected_instance_methods, :private_instance_methods, :constants, :const_get, :const_set, :const_defined?, :const_missing, :die, :class_variables, :remove_class_variable, :class_variable_get, :class_variable_set, :class_variable_defined?, :public_constant, :private_constant, :singleton_class?, :include, :prepend, :hydrate, :module_exec, :class_exec, :module_eval, :class_eval, :method_defined?, :public_method_defined?, :fuck, :private_method_defined?, :protected_method_defined?, :public_class_method, :private_class_method, :autoload, :eat :autoload?, :instance_method, :public_instance_method, :to_json, :nil?, :=~, :!~, :eql?, :hash, :class, :singleton_class, :clone, :dup, :itself, :taint, :tainted?, :pontificate :untaint, :untrust, :meiosis, :untrusted?, :trust, :frozen?, :methods, :...
</code></pre>

<p>Whoa, there&rsquo;s a lot going on in there&hellip;.</p>

<p>Wait! I see a method called <code>:hydrate</code>. Maybe&hellip;</p>

<pre><code class="ruby">david.hydrate

# ~&gt; HydrationError
# ~&gt; expecting water (0 for 1)
# ~&gt;
# ~&gt; /Users/david/dev/dream.rb:17:in `hydrate'
# ~&gt; /Users/david/dev/dream.rb:35:in `&lt;main&gt;'
</code></pre>

<p>It&rsquo;s great when Ruby errors are so descriptive. It looks like I need water.</p>

<p>&ldquo;Taryn, I figured it out! I just needed a glass of water!&rdquo;</p>

<p>She mumbles something and puts a pillow over her head.</p>

<h2>Programming Dreams</h2>

<p>Apparently maddening dreams related to programming are pretty common. There are some good ones in here:</p>

<p><a href="http://c2.com/cgi/wiki?WeirdDeveloperDreams">http://c2.com/cgi/wiki?WeirdDeveloperDreams</a></p>

<p>including this gem:</p>

<blockquote><p>I know I&rsquo;m awake, &amp; I know I fall asleep. Then, in the dream, I wake up a few minutes later, and, in the dream, can&rsquo;t sleep. I spend a few hours wandering around the house until I get tired again, and in the dream, fall asleep again. Then, still in the dream, my alarm goes off. I wake up, and start to go about my day, which feels like an extension of the bad dream I&rsquo;d &ldquo;just had&rdquo; in the bad dream I <em>AM</em> having.
Recurse this about five times, so that by the time my REAL alarm goes off, and I really AM awake, I&rsquo;m so F4&rsquo;d up I can&rsquo;t tell if I&rsquo;m awake, asleep, if I ever WENT to sleep, if I&rsquo;ve gotten ANY rest what-so-ever, and subsequently spend the rest of the day feeling emotionally &amp; physically drained.
Then I go home that night, hit the couch, and sleep for nine hours straight.
This is not an uncommon occurrence, unfortunately.</p></blockquote>

<p><img src="http://media.giphy.com/media/D3hbWaBffn9Cg/giphy.gif" alt="recursion" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let There Be Light!]]></title>
    <link href="http://nigelfloe.github.io/blog/2015/08/09/let-there-be-light/"/>
    <updated>2015-08-09T18:13:59-04:00</updated>
    <id>http://nigelfloe.github.io/blog/2015/08/09/let-there-be-light</id>
    <content type="html"><![CDATA[<h2>Introduction - An Ode to _why and Ruby Koans</h2>

<p>Near the beginning of my brief career as a Rubyist, I came across an invaluable resource, <strong><a href="http://mislav.uniqpath.com/poignant-guide/">Why&rsquo;s (Poignant) Guide to Ruby</a></strong>. Written by the elusive _why the lucky stiff, the <em>Poignant Guide</em> is equal parts Ruby tutorial and postmodern meta-fiction. Code examples walk the reader through the construction of monkeys with frogs attached to their hands, dank dungeons optimized for the slaying of intrepid rabbit adventurers, and an alien planet which can read your mind, or grant a wish, but not both at the same time.</p>

<p>These madcap coding lessons are embedded within a frame story involving a well-meaning mad scientist, the ghost of the niece he accidentally killed, cartoon foxes looking for their stolen pickup truck, and a hopelessly imprisoned Frenchman. Also there is a sideplot about a secret society that eats scarves. The book is quite joyously insane, and what it lacks in technical detail, it more than makes up for in sheer inventiveness and creative zeal, although the &lsquo;ending&rsquo; is a bit of a letdown. The <em>Poignant Guide</em> is required reading for any Rubyist.</p>

<p>Tragically, _why the lucky stiff committed &lsquo;infocide&rsquo; in August 2009, removing all of his code from Github and withdrawing completely from the Ruby community. This <strong><a href="http://www.slate.com/articles/technology/technology/2012/03/ruby_ruby_on_rails_and__why_the_disappearance_of_one_of_the_world_s_most_beloved_computer_programmers_.html">Slate article</a></strong> does a good job of describing his importance to the community, and the impact of his disappearance.</p>

<p>Why returned briefly in January 2013 to send a printer file to Steve Klabnik, the programmer who has kept Why&rsquo;s <strong><a href="http://www.hackety.com/">Hackety Hack</a></strong> project alive after his disappearance. Klabnik has compiled and released this document under the title <strong><a href="https://ia601703.us.archive.org/28/items/136875051WhySCompletePrinterSpoolAsOneBook/136875051--why-s-complete-printer-spool-as-one-book.pdf">Closure</a></strong>, and has made his own <strong><a href="http://words.steveklabnik.com/the-closure-companion">comments about Why&rsquo;s final work</a></strong>. The work contains, among other vignettes, musings about the thanklessness of a career in programming and the deletion of one&rsquo;s public identity.</p>

<p>Apart from my fascination with Why and his story, I&rsquo;ve found great encouragement in his efforts to instill programming with a sense of limitless creativity and whimsy, and have found that some of his strangest, or most creative, code examples from the <em>Poignant Guide</em> have stuck with me the most and helped to hammer in my understanding of Ruby basics. I love the idea of world-building in Ruby, and think that the language lends itself to constructing, not only useful tools, but also to modelling fantastical creatures, mythological entities, and possibly, spiritual truths.</p>

<p>Following in Why&rsquo;s footsteps are sites like <strong><a href="https://rubymonk.com/">rubymonk</a></strong>, which presents coding exercises as being similar to Zen koans which must be unravelled by the student. In <strong><a href="http://rubymonk.com/learning/books/2-metaprogramming-ruby/chapters/25-dynamic-methods/lessons/65-send">one example</a></strong> the student&rsquo;s walking staff transforms into a mysterious glider whose properties must be sussed out using the <code>send</code> method. <strong><a href="http://rubymonk.com/learning/books/2-metaprogramming-ruby/chapters/25-dynamic-methods/lessons/72-define-method">Later on</a></strong> in their introduction to metaprogramming, <code>define_method</code> is used iteratively to allow a young Monk to meditate on the meaning of Life, the Universe, and Everything in order to attain Ultimate Power.</p>

<h2>Genesis 1: <code>"Let there be #{thing}!"</code></h2>

<p>I&rsquo;m still getting a sense of the power of <code>define_method</code>. Below we will use it to call creation into being:</p>

<blockquote><p>In the beginning God created the heavens and the earth.</p></blockquote>

<pre><code class="ruby">class God
  attr_reader: heavens_and_earth

  def create_heavens_and_earth
    @heavens_and_earth = Universe.new
  end
end

class Universe
  attr_accessor :day, :light, :sky, :land, :stars, :creatures, :humans, :blessed

  def initialize
    @day = 0
  end
end
</code></pre>

<p>In order for our God to create the heavens and earth, we will need to construct a <code>God</code> class and a <code>create_heavens_and_earth</code> method which will create a new instance variable, <code>@heavens_and_earth</code> which will be assigned to a new instance of the <code>Universe</code> class.</p>

<p>You can see that a new <code>Universe</code> needs to be &lsquo;created&rsquo; with a list of <code>attr_accessor</code>&rsquo;s which will enable our <code>God</code> to create as it wishes, but the the only attribute that a <code>Universe</code> will have set on initialization will be <code>@day</code> with a value of <code>0</code>.</p>

<p>Also note that our <code>God</code> will have an <code>attr_reader</code> for <code>@heavens_and_earth</code> in order to check in on its creation.</p>

<p>First we will need to instantiate our <code>God</code> class and create a universe:
<code>ruby
god = God.new                 # =&gt; #&lt;God:0x007fc5e50b5240&gt;
god.create_heavens_and_earth  # =&gt; #&lt;Universe:0x007fc5e50b4ea8 @day=0&gt;
</code></p>

<p>In order for <code>god</code> to populate <code>@heavens_and_earth</code> with all of the nice things people appreciate, he will need some methods at his disposal:
```ruby
class God</p>

<p>  [&ldquo;light&rdquo;, &ldquo;sky&rdquo;, &ldquo;land&rdquo;, &ldquo;stars&rdquo;, &ldquo;creatures&rdquo;, &ldquo;humans&rdquo;].each do |thing|
    define_method(&ldquo;create_#{thing}&rdquo;) do
      @heavens_and_earth.send(&ldquo;#{thing}=&rdquo;, true)
      @heavens_and_earth.day +=1
      &ldquo;Let there be #{thing}!&rdquo;
    end
  end
end
<code>``
Here we use</code>define_method` and iteration in order to create a number of methods which all do essentially the same thing but with a different name and target.</p>

<p>Each of the items in the array above (<code>"light","sky","land"</code>, etc.) is passed into an <code>each</code> loop and used to define an instance method for <code>god</code>, our instance of the <code>God</code> class:</p>

<ul>
<li><code>create_light</code></li>
<li><code>create_sky</code></li>
<li><code>create_land</code></li>
<li>etc.</li>
</ul>


<p>Each of these methods, when called, will use the <code>send</code> method to send a command to <code>@heavens_and_earth</code> our instance of the <code>Universe</code> class, to create the given &ldquo;thing&rdquo; (ie. changing its value to <code>true</code>), moving time in that <code>Universe</code> forward by 1 day, and returning <code>god</code>&rsquo;s declamation about that thing.</p>

<p>Cue day 1:
<code>ruby
god.heavens_and_earth.light   # =&gt; nil
god.create_light              # =&gt; "Let there be light!"
god.heavens_and_earth.light   # =&gt; true
god.heavens_and_earth.day     # =&gt; 1
</code></p>

<p>Note that, before <code>create_light</code> was called on <code>god</code>, there was no <code>light</code> in <code>god</code>&rsquo;s <code>heavens_and_earth</code>. Also note that <code>define_method</code>, used in our <code>each</code> loop, did successfully create at <code>create_light</code> instance method for <code>god</code>, even though we didn&rsquo;t explicitly create it using <code>def create_light</code>.</p>

<p>Here, <code>create_light</code> is called on <code>god</code>, and <code>god</code> proclaims (returns) <code>"Let there be light!"</code>. We can see that <code>@heavens_and_earth</code> now has light (<code>@light = true</code>), and the day in our <code>Universe</code> is now <code>1</code>. Not a bad day&rsquo;s work.</p>

<p>Day 2 proceeds much the same way:
<code>ruby
god.heavens_and_earth.sky  # =&gt; nil
god.create_sky             # =&gt; "Let there be sky!"
god.heavens_and_earth.sky  # =&gt; true
god.heavens_and_earth.day  # =&gt; 2
</code></p>

<p>As does day 3:
<code>ruby
god.heavens_and_earth.land  # =&gt; nil
god.create_land             # =&gt; "Let there be land!"
god.heavens_and_earth.land  # =&gt; true
god.heavens_and_earth.day   # =&gt; 3
</code></p>

<p>Day 4:
<code>ruby
god.heavens_and_earth.stars  # =&gt; nil
god.create_stars             # =&gt; "Let there be stars!"
god.heavens_and_earth.stars  # =&gt; true
god.heavens_and_earth.day     # =&gt; 4
</code></p>

<p>Day 5:
<code>ruby
god.heavens_and_earth.creatures  # =&gt; nil
god.create_creatures             # =&gt; "Let there be creatures!"
god.heavens_and_earth.creatures  # =&gt; true
god.heavens_and_earth.day    # =&gt; 5
</code></p>

<p>And day 6:
<code>ruby
od.heavens_and_earth.humans  # =&gt; nil
god.create_humans             # =&gt; "Let there be humans!"
god.heavens_and_earth.humans  # =&gt; true
god.heavens_and_earth.day        # =&gt; 6
</code></p>

<p>Because of that metaprogramming wizardry we set our <code>God</code> class up with earlier, we didn&rsquo;t have to go back and define additional methods for each of <code>god</code>&rsquo;s creative actions, so that&rsquo;s neat.</p>

<p>On the seventh day, <code>god</code> rests. We just need to crack open the <code>God</code> class:
<code>ruby
class God
  def rest
    @heavens_and_earth.blessed = true
    @heavens_and_earth.day +=1
    "It is good."
  end
end
</code>
And give our guy a chance to take a break.</p>

<blockquote><p>By the seventh day God had finished the work he had been doing; so on the seventh day he rested from all his work. Then God blessed the seventh day and made it holy, because on it he rested from all the work of creating that he had done.</p></blockquote>

<pre><code class="ruby">god.heavens_and_earth.blessed  # =&gt; nil
god.rest                       # =&gt; "It is good."
god.heavens_and_earth.blessed  # =&gt; true
god.heavens_and_earth.day      # =&gt; 7
</code></pre>

<p>I think that&rsquo;s all for now. Hope you enjoyed reading. Next time: something else!</p>

<ul>
<li><strong>Bonus: Our universe from the above example, <code>@heavens_and_earth</code>, exists only as an instance variable of our instance of the <code>God</code> class, or <code>god</code> for short. <code>@heavens_and_earth</code> cannot outlive <code>god</code>.</strong>

<ul>
<li>Is this how our actual universe works?</li>
<li>Nietzsche famously stated that &ldquo;God is dead&rdquo;, does this mean that we never existed?</li>
<li>Will I be able to improve on this model next time?</li>
<li>True or false: What <em>has been</em> exists no more; and exists just as little as that which
has <em>never</em> been. But everything that exists <em>has been</em> in the next
moment.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post On Octopress]]></title>
    <link href="http://nigelfloe.github.io/blog/2015/08/04/my-first-post-on-octopress/"/>
    <updated>2015-08-04T14:33:45-04:00</updated>
    <id>http://nigelfloe.github.io/blog/2015/08/04/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Hello, Universe</p>
]]></content>
  </entry>
  
</feed>
