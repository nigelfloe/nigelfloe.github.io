<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Creation in Code]]></title>
  <link href="http://nigelfloe.github.io/atom.xml" rel="self"/>
  <link href="http://nigelfloe.github.io/"/>
  <updated>2015-09-08T00:12:35-04:00</updated>
  <id>http://nigelfloe.github.io/</id>
  <author>
    <name><![CDATA[David Rowe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mountains are merely mountains]]></title>
    <link href="http://nigelfloe.github.io/blog/2015/09/08/mountains-are-merely-mountains/"/>
    <updated>2015-09-08T00:11:10-04:00</updated>
    <id>http://nigelfloe.github.io/blog/2015/09/08/mountains-are-merely-mountains</id>
    <content type="html"><![CDATA[<h3>The brook of the mountains</h3>

<h3>Gives me more pleasure than the sea</h3>

<h4>- José Martí</h4>

<p>I spent the weekend at the beach with family. It was a nice opportunity to clear my mind of the burden of my day to day, <a href="http://www.theonion.com/article/84-million-new-yorkers-suddenly-realize-new-york-c-18003">get out of NYC</a>, and allow my mind to come back to the present.</p>

<p>Also, I got a really bad sunburn :-/</p>

<p><img src="http://www.fusiontrained.com/wp-content/uploads/2014/09/Will-Ferrell-sunburn.jpg" alt="http://www.fusiontrained.com/wp-content/uploads/2014/09/Will-Ferrell-sunburn.jpg" /></p>

<p>I&rsquo;ve been thinking a lot about the choices one has to make in order to become an effective programmer. Whether you are learning a new language, being exposed to new concepts and techniques, or applying what you already know to solve the day&rsquo;s challenges, it is easy to become overwhelmed and discouraged by what you don&rsquo;t know or understand. The following quote by artist/photographer/programmer Adam Magyar sums the problem of human limitation:</p>

<h3>I was thinking about how little choice we have when we select our path. We are able to see just a narrow angle, whatever we do. Our knowledge is really limited, and small.”</h3>

<h4>-Adam Magyar</h4>

<p>We only have so much control over the world around us at any given time. We can only see the world from our own eyes. The path we walk is shrouded in uncertainty. Our actions seem insignificant given the grand scale of the universe.</p>

<p><img src="https://paulandsilas.files.wordpress.com/2010/10/insignificant.jpeg" alt="https://paulandsilas.files.wordpress.com/2010/10/insignificant.jpeg" /></p>

<p>Remember that your choices have dignity and importance precisely because you make them in the face of entropy. We choose to build and create and love everyday, and our universe is undoubtedly a richer place because of it.</p>

<p>Accept your limitations. At this moment, there is much you do not know how to do. In every moment you choose to treat the boundary of your knowledge as an end or a beginning. Growth happens as we push that boundary outwards, beyond our current selves.</p>

<p>Every problem will yield to diligent effort, and the abstraction, or method, or pattern you struggle to understand today will be your go-to solution tomorrow.</p>

<p>Growth takes time, and your path will have its detours. Be humble. Be patient. Listen to your feelings. Trust your intuition.</p>

<h2>Zen and the Art of Computer Programming</h2>

<p>The principles of Zen can be applied to virtually any craft, and programming is no different. The title of this section is taken from <a href="http://www.librarysystems.com/zen.htm">this essay</a> by Larry W. Yother, back in 1986. It&rsquo;s a quick read, and is full of helpful advice. Here is a key paragraph:</p>

<blockquote><p>The system will invariably impose all manner of restrictions: the memory space isn’t big enough, the language is limited, input-output devices won’t do what you would like them to. These become challenges, albeit frustrating ones.</p>

<p>Most of the restrictions, however, are in your own mind. It is very difficult to resist the trap of continuing to look for a solution in the wrong place. If an approach to a particular problem yields no results, the usual response is to work even harder on that same approach. This unfortunate fact seems to be true in all human endeavors, from child-raising to international relations. You, as programmer, must know about when something should be expected to pay off, and, if the time passes and there is no payoff, you must stop doing whatever you’re doing and try something else. You must look around at this point, try to see what you’re really doing, and do something else.</p></blockquote>

<p>See also these <strong><a href="http://www.grobmeier.de/the-10-rules-of-a-zen-programmer-03022012.html">10 Rules of a Zen Programmer</a></strong> by Christian Grobmeier. (I&rsquo;m thinking of ordering the book). The bullet points listed below are elaborated in much more detail at the above link:</p>

<p><img src="http://www.grobmeier.de/img/content/200px-Lotus-buddha.svg_.png" alt="http://www.grobmeier.de/img/content/200px-Lotus-buddha.svg_.png" /></p>

<ol>
<li>Focus</li>
<li>Keep your mind clean</li>
<li>Beginners mind</li>
<li>No ego</li>
<li>There is no career goal</li>
<li>Shut up</li>
<li>Mindfulness. Care. Awareness</li>
<li>There is no Boss</li>
<li>Do something else</li>
<li>There is nothing special</li>
</ol>


<p>Last but not least, there are the <strong><a href="http://rubykoans.com/">Neo Ruby Koans</a></strong>. This project is essentially a public directory of ruby files which anybody can download. Each file contains many Ruby quizzes and coding puzzles designed to train the user through developing their Ruby skills, from working with hashes, strings, and symbols, to metaprogramming and Ruby interoptivity with Java.</p>

<p>The Koans are structured as a test-driven development (TDD) project, and running the path_to_enlightenment.rb file provides a customized test output to the terminal (similar to Rspec) which points the developer-in-training towards the next piece of code which requires attention. The title of this post, &ldquo;Mountains are only mountains&rdquo; is a mantra borrowed from the Ruby Koans.</p>

<h3>Every day is a good day</h3>

<h4>Special thanks to: RB, CM, KR, SL, ETO</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Dream of Ruby]]></title>
    <link href="http://nigelfloe.github.io/blog/2015/08/23/i-dream-of-ruby/"/>
    <updated>2015-08-23T18:49:49-04:00</updated>
    <id>http://nigelfloe.github.io/blog/2015/08/23/i-dream-of-ruby</id>
    <content type="html"><![CDATA[<h2>HydrationError expecting water (0 for 1)</h2>

<p>Last night, I lay tossing and turning in bed, wrestling with phantom error messages. For some reason, the <code>sound_sleep</code> method I normally relied on to send my <code>self</code> (<code>david = Person.new(name: David, age: 26)</code>) off to <code>asleep = true</code> wasn&rsquo;t doing the trick.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sleepable</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:asleep</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">:,</span> <span class="ss">age</span><span class="p">:)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>    <span class="vi">@asleep</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">asleep?</span>
</span><span class='line'>    <span class="o">!!</span><span class="vi">@asleep</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">david</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;David&#39;</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">26</span><span class="p">)</span>
</span><span class='line'><span class="n">david</span><span class="o">.</span><span class="n">asleep?</span>                               <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s going on here? I roll over, and ask Taryn, my girlfriend, why I can&rsquo;t sleep. She furrows her brows and turns away from me, taking the blankets.</p>

<p>Hmph. I guess I&rsquo;ll check the Sleepable module for answers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Sleepable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sound_sleep</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">hydrated</span>
</span><span class='line'>      <span class="n">asleep</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">david</span><span class="o">.</span><span class="n">sound_sleep</span>                           <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>nil</code> sleep sucks at 2 AM.</p>

<p>Check the conditional, maybe <code>self</code> is de<code>hydrated</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">david</span><span class="o">.</span><span class="n">hydrated</span>                              <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>nil</code> isn&rsquo;t really helping me here&hellip;. Let&rsquo;s look at my Person class again&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="no">Biology</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Sleepable</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:asleep</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">:,</span> <span class="ss">age</span><span class="p">:)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>    <span class="vi">@asleep</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">asleep?</span>
</span><span class='line'>    <span class="o">!!</span><span class="vi">@asleep</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">david</span><span class="o">.</span><span class="n">asleep?</span>                               <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>grumble</em></p>

<p>I don&rsquo;t see anything about <code>hydrate</code> here. This is hopeless, and <code>david</code> is so tired&hellip;I mean.. <em>I&rsquo;m</em> so tired. <code>self</code> is tired&hellip;..</p>

<p>Hang on! What&rsquo;s that <code>Biology</code> inheritance? That wasn&rsquo;t there before! Fucking dream code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">david</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">ancestors</span>                       <span class="c1"># =&gt; [Person, Sleepable, Biology, Object, Kernel, BasicObject]</span>
</span></code></pre></td></tr></table></div></figure>


<p>a-HA! a <code>Biology</code> class, that must be the class that&hellip;ummm&hellip;generates behavior for&hellip;..biologic things&hellip;.like birds! or <a href="http://giphy.com/gifs/cat-lolcats-the-internet-EeffMbJ6pwxAQ">lolcats</a>! or people maybe</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Biology</span><span class="o">.</span><span class="n">methods</span>                             <span class="c1"># =&gt; [:allocate, :new, :superclass, :json_creatable?, :freeze, :===, :==, :&lt;=&gt;, :&lt;, :&lt;=, :&gt;, :&gt;=, :to_s, :inspect, :included_modules, :sh_t, :include?, :name, :ancestors, :instance_methods, :public_instance_methods, :protected_instance_methods, :private_instance_methods, :constants, :const_get, :const_set, :const_defined?, :const_missing, :die, :class_variables, :remove_class_variable, :class_variable_get, :class_variable_set, :class_variable_defined?, :public_constant, :private_constant, :singleton_class?, :include, :prepend, :hydrate, :module_exec, :class_exec, :module_eval, :class_eval, :method_defined?, :public_method_defined?, :fuck, :private_method_defined?, :protected_method_defined?, :public_class_method, :private_class_method, :autoload, :eat :autoload?, :instance_method, :public_instance_method, :to_json, :nil?, :=~, :!~, :eql?, :hash, :class, :singleton_class, :clone, :dup, :itself, :taint, :tainted?, :pontificate :untaint, :untrust, :meiosis, :untrusted?, :trust, :frozen?, :methods, :...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whoa, there&rsquo;s a lot going on in there&hellip;.</p>

<p>Wait! I see a method called <code>:hydrate</code>. Maybe&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">david</span><span class="o">.</span><span class="n">hydrate</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ~&gt; HydrationError</span>
</span><span class='line'><span class="c1"># ~&gt; expecting water (0 for 1)</span>
</span><span class='line'><span class="c1"># ~&gt;</span>
</span><span class='line'><span class="c1"># ~&gt; /Users/david/dev/dream.rb:17:in `hydrate&#39;</span>
</span><span class='line'><span class="c1"># ~&gt; /Users/david/dev/dream.rb:35:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s great when Ruby errors are so descriptive. It looks like I need water.</p>

<p>&ldquo;Taryn, I figured it out! I just needed a glass of water!&rdquo;</p>

<p>She mumbles something and puts a pillow over her head.</p>

<h2>Programming Dreams</h2>

<p>Apparently maddening dreams related to programming are pretty common. There are some good ones in here:</p>

<p><a href="http://c2.com/cgi/wiki?WeirdDeveloperDreams">http://c2.com/cgi/wiki?WeirdDeveloperDreams</a></p>

<p>including this gem:</p>

<blockquote><p>I know I&rsquo;m awake, &amp; I know I fall asleep. Then, in the dream, I wake up a few minutes later, and, in the dream, can&rsquo;t sleep. I spend a few hours wandering around the house until I get tired again, and in the dream, fall asleep again. Then, still in the dream, my alarm goes off. I wake up, and start to go about my day, which feels like an extension of the bad dream I&rsquo;d &ldquo;just had&rdquo; in the bad dream I <em>AM</em> having.
Recurse this about five times, so that by the time my REAL alarm goes off, and I really AM awake, I&rsquo;m so F4&rsquo;d up I can&rsquo;t tell if I&rsquo;m awake, asleep, if I ever WENT to sleep, if I&rsquo;ve gotten ANY rest what-so-ever, and subsequently spend the rest of the day feeling emotionally &amp; physically drained.
Then I go home that night, hit the couch, and sleep for nine hours straight.
This is not an uncommon occurrence, unfortunately.</p></blockquote>

<p><img src="http://media.giphy.com/media/D3hbWaBffn9Cg/giphy.gif" alt="recursion" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let There Be Light!]]></title>
    <link href="http://nigelfloe.github.io/blog/2015/08/09/let-there-be-light/"/>
    <updated>2015-08-09T18:13:59-04:00</updated>
    <id>http://nigelfloe.github.io/blog/2015/08/09/let-there-be-light</id>
    <content type="html"><![CDATA[<h2>Introduction - An Ode to _why and Ruby Koans</h2>

<p>Near the beginning of my brief career as a Rubyist, I came across an invaluable resource, <strong><a href="http://mislav.uniqpath.com/poignant-guide/">Why&rsquo;s (Poignant) Guide to Ruby</a></strong>. Written by the elusive _why the lucky stiff, the <em>Poignant Guide</em> is equal parts Ruby tutorial and postmodern meta-fiction. Code examples walk the reader through the construction of monkeys with frogs attached to their hands, dank dungeons optimized for the slaying of intrepid rabbit adventurers, and an alien planet which can read your mind, or grant a wish, but not both at the same time.</p>

<p>These madcap coding lessons are embedded within a frame story involving a well-meaning mad scientist, the ghost of the niece he accidentally killed, cartoon foxes looking for their stolen pickup truck, and a hopelessly imprisoned Frenchman. Also there is a sideplot about a secret society that eats scarves. The book is quite joyously insane, and what it lacks in technical detail, it more than makes up for in sheer inventiveness and creative zeal, although the &lsquo;ending&rsquo; is a bit of a letdown. The <em>Poignant Guide</em> is required reading for any Rubyist.</p>

<p>Tragically, _why the lucky stiff committed &lsquo;infocide&rsquo; in August 2009, removing all of his code from Github and withdrawing completely from the Ruby community. This <strong><a href="http://www.slate.com/articles/technology/technology/2012/03/ruby_ruby_on_rails_and__why_the_disappearance_of_one_of_the_world_s_most_beloved_computer_programmers_.html">Slate article</a></strong> does a good job of describing his importance to the community, and the impact of his disappearance.</p>

<p>Why returned briefly in January 2013 to send a printer file to Steve Klabnik, the programmer who has kept Why&rsquo;s <strong><a href="http://www.hackety.com/">Hackety Hack</a></strong> project alive after his disappearance. Klabnik has compiled and released this document under the title <strong><a href="https://ia601703.us.archive.org/28/items/136875051WhySCompletePrinterSpoolAsOneBook/136875051--why-s-complete-printer-spool-as-one-book.pdf">Closure</a></strong>, and has made his own <strong><a href="http://words.steveklabnik.com/the-closure-companion">comments about Why&rsquo;s final work</a></strong>. The work contains, among other vignettes, musings about the thanklessness of a career in programming and the deletion of one&rsquo;s public identity.</p>

<p>Apart from my fascination with Why and his story, I&rsquo;ve found great encouragement in his efforts to instill programming with a sense of limitless creativity and whimsy, and have found that some of his strangest, or most creative, code examples from the <em>Poignant Guide</em> have stuck with me the most and helped to hammer in my understanding of Ruby basics. I love the idea of world-building in Ruby, and think that the language lends itself to constructing, not only useful tools, but also to modelling fantastical creatures, mythological entities, and possibly, spiritual truths.</p>

<p>Following in Why&rsquo;s footsteps are sites like <strong><a href="https://rubymonk.com/">rubymonk</a></strong>, which presents coding exercises as being similar to Zen koans which must be unravelled by the student. In <strong><a href="http://rubymonk.com/learning/books/2-metaprogramming-ruby/chapters/25-dynamic-methods/lessons/65-send">one example</a></strong> the student&rsquo;s walking staff transforms into a mysterious glider whose properties must be sussed out using the <code>send</code> method. <strong><a href="http://rubymonk.com/learning/books/2-metaprogramming-ruby/chapters/25-dynamic-methods/lessons/72-define-method">Later on</a></strong> in their introduction to metaprogramming, <code>define_method</code> is used iteratively to allow a young Monk to meditate on the meaning of Life, the Universe, and Everything in order to attain Ultimate Power.</p>

<h2>Genesis 1: <code>"Let there be #{thing}!"</code></h2>

<p>I&rsquo;m still getting a sense of the power of <code>define_method</code>. Below we will use it to call creation into being:</p>

<blockquote><p>In the beginning God created the heavens and the earth.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">God</span>
</span><span class='line'>  <span class="kp">attr_reader</span><span class="p">:</span> <span class="n">heavens_and_earth</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_heavens_and_earth</span>
</span><span class='line'>    <span class="vi">@heavens_and_earth</span> <span class="o">=</span> <span class="no">Universe</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Universe</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:day</span><span class="p">,</span> <span class="ss">:light</span><span class="p">,</span> <span class="ss">:sky</span><span class="p">,</span> <span class="ss">:land</span><span class="p">,</span> <span class="ss">:stars</span><span class="p">,</span> <span class="ss">:creatures</span><span class="p">,</span> <span class="ss">:humans</span><span class="p">,</span> <span class="ss">:blessed</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@day</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order for our God to create the heavens and earth, we will need to construct a <code>God</code> class and a <code>create_heavens_and_earth</code> method which will create a new instance variable, <code>@heavens_and_earth</code> which will be assigned to a new instance of the <code>Universe</code> class.</p>

<p>You can see that a new <code>Universe</code> needs to be &lsquo;created&rsquo; with a list of <code>attr_accessor</code>&rsquo;s which will enable our <code>God</code> to create as it wishes, but the the only attribute that a <code>Universe</code> will have set on initialization will be <code>@day</code> with a value of <code>0</code>.</p>

<p>Also note that our <code>God</code> will have an <code>attr_reader</code> for <code>@heavens_and_earth</code> in order to check in on its creation.</p>

<p>First we will need to instantiate our <code>God</code> class and create a universe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">god</span> <span class="o">=</span> <span class="no">God</span><span class="o">.</span><span class="n">new</span>                 <span class="c1"># =&gt; #&lt;God:0x007fc5e50b5240&gt;</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">create_heavens_and_earth</span>  <span class="c1"># =&gt; #&lt;Universe:0x007fc5e50b4ea8 @day=0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order for <code>god</code> to populate <code>@heavens_and_earth</code> with all of the nice things people appreciate, he will need some methods at his disposal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">God</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[</span><span class="s2">&quot;light&quot;</span><span class="p">,</span> <span class="s2">&quot;sky&quot;</span><span class="p">,</span> <span class="s2">&quot;land&quot;</span><span class="p">,</span> <span class="s2">&quot;stars&quot;</span><span class="p">,</span> <span class="s2">&quot;creatures&quot;</span><span class="p">,</span> <span class="s2">&quot;humans&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">thing</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;create_</span><span class="si">#{</span><span class="n">thing</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@heavens_and_earth</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">thing</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@heavens_and_earth</span><span class="o">.</span><span class="n">day</span> <span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>      <span class="s2">&quot;Let there be </span><span class="si">#{</span><span class="n">thing</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we use <code>define_method</code> and iteration in order to create a number of methods which all do essentially the same thing but with a different name and target.</p>

<p>Each of the items in the array above (<code>"light","sky","land"</code>, etc.) is passed into an <code>each</code> loop and used to define an instance method for <code>god</code>, our instance of the <code>God</code> class:</p>

<ul>
<li><code>create_light</code></li>
<li><code>create_sky</code></li>
<li><code>create_land</code></li>
<li>etc.</li>
</ul>


<p>Each of these methods, when called, will use the <code>send</code> method to send a command to <code>@heavens_and_earth</code> our instance of the <code>Universe</code> class, to create the given &ldquo;thing&rdquo; (ie. changing its value to <code>true</code>), moving time in that <code>Universe</code> forward by 1 day, and returning <code>god</code>&rsquo;s declamation about that thing.</p>

<p>Cue day 1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">light</span>   <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">create_light</span>              <span class="c1"># =&gt; &quot;Let there be light!&quot;</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">light</span>   <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">day</span>     <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that, before <code>create_light</code> was called on <code>god</code>, there was no <code>light</code> in <code>god</code>&rsquo;s <code>heavens_and_earth</code>. Also note that <code>define_method</code>, used in our <code>each</code> loop, did successfully create at <code>create_light</code> instance method for <code>god</code>, even though we didn&rsquo;t explicitly create it using <code>def create_light</code>.</p>

<p>Here, <code>create_light</code> is called on <code>god</code>, and <code>god</code> proclaims (returns) <code>"Let there be light!"</code>. We can see that <code>@heavens_and_earth</code> now has light (<code>@light = true</code>), and the day in our <code>Universe</code> is now <code>1</code>. Not a bad day&rsquo;s work.</p>

<p>Day 2 proceeds much the same way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">sky</span>  <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">create_sky</span>             <span class="c1"># =&gt; &quot;Let there be sky!&quot;</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">sky</span>  <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">day</span>  <span class="c1"># =&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>As does day 3:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">land</span>  <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">create_land</span>             <span class="c1"># =&gt; &quot;Let there be land!&quot;</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">land</span>  <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">day</span>   <span class="c1"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Day 4:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">stars</span>  <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">create_stars</span>             <span class="c1"># =&gt; &quot;Let there be stars!&quot;</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">stars</span>  <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">day</span>     <span class="c1"># =&gt; 4</span>
</span></code></pre></td></tr></table></div></figure>


<p>Day 5:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">creatures</span>  <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">create_creatures</span>             <span class="c1"># =&gt; &quot;Let there be creatures!&quot;</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">creatures</span>  <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">day</span>    <span class="c1"># =&gt; 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>And day 6:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">od</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">humans</span>  <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">create_humans</span>             <span class="c1"># =&gt; &quot;Let there be humans!&quot;</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">humans</span>  <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">day</span>        <span class="c1"># =&gt; 6</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because of that metaprogramming wizardry we set our <code>God</code> class up with earlier, we didn&rsquo;t have to go back and define additional methods for each of <code>god</code>&rsquo;s creative actions, so that&rsquo;s neat.</p>

<p>On the seventh day, <code>god</code> rests. We just need to crack open the <code>God</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">God</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rest</span>
</span><span class='line'>    <span class="vi">@heavens_and_earth</span><span class="o">.</span><span class="n">blessed</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="vi">@heavens_and_earth</span><span class="o">.</span><span class="n">day</span> <span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>    <span class="s2">&quot;It is good.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And give our guy a chance to take a break.</p>

<blockquote><p>By the seventh day God had finished the work he had been doing; so on the seventh day he rested from all his work. Then God blessed the seventh day and made it holy, because on it he rested from all the work of creating that he had done.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">blessed</span>  <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">rest</span>                       <span class="c1"># =&gt; &quot;It is good.&quot;</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">blessed</span>  <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">god</span><span class="o">.</span><span class="n">heavens_and_earth</span><span class="o">.</span><span class="n">day</span>      <span class="c1"># =&gt; 7</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think that&rsquo;s all for now. Hope you enjoyed reading. Next time: something else!</p>

<ul>
<li><strong>Bonus: Our universe from the above example, <code>@heavens_and_earth</code>, exists only as an instance variable of our instance of the <code>God</code> class, or <code>god</code> for short. <code>@heavens_and_earth</code> cannot outlive <code>god</code>.</strong>

<ul>
<li>Is this how our actual universe works?</li>
<li>Nietzsche famously stated that &ldquo;God is dead&rdquo;, does this mean that we never existed?</li>
<li>Will I be able to improve on this model next time?</li>
<li>True or false: What <em>has been</em> exists no more; and exists just as little as that which
has <em>never</em> been. But everything that exists <em>has been</em> in the next
moment.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post On Octopress]]></title>
    <link href="http://nigelfloe.github.io/blog/2015/08/04/my-first-post-on-octopress/"/>
    <updated>2015-08-04T14:33:45-04:00</updated>
    <id>http://nigelfloe.github.io/blog/2015/08/04/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Hello, Universe</p>
]]></content>
  </entry>
  
</feed>
